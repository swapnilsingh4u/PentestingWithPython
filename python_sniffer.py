import socket
import struct
import binascii

s = socket.socket(socket.AF_PACKET,socket.SOCK_RAW,socket.ntohs(0x0800))

while True:
    pkt = s.recvfrom(2048)

    print("----------------Whole Packet----------------")
    print(pkt)
    print("--------------------------------------------")
    
    ethhead = pkt[0][0:14]
    print("--------------------Ethernet Frame----------")
    print(ethhead)
    print("--------------------------------------------")
    
    eth = struct.unpack("6s6s2s",ethhead)
    print("-----------Structured Format using Struct---------")
    print(eth)
    print("--------------------------------------------------")
    
    print("-------------Extracting MAC address info--------------")
    print(b"Destination MAC Address : "+binascii.hexlify(eth[0]))
    print(b"Source MAC Address : "+binascii.hexlify(eth[1]))
    
    # Ip address 

    ipheader = pkt[0][14:34]
    print("-------------------IP Header Frame-----------------")
    print(ipheader)
    print("---------------------------------------------------")
    print("-----------------Structured Format using Struct -----------")
    ip_hdr = struct.unpack("!12s4s4s",ipheader)
    print(ip_hdr)
    print("-------------------Extracting IP Address info---------------")
    print("Source IP Address: "+socket.inet_ntoa(ip_hdr[1]))
    print("Destination IP Address: "+socket.inet_ntoa(ip_hdr[2]))
    
    # Grabbing TCP packets and getting port numbers

    print("----------------TCP Packet----------------------")
    tcpheader = pkt[0][34:54]
    print(tcpheader)
    print("-------------------------------------------------")
    print("---------------------Structured Format using struct--------------")
    tcp_hdr = struct.unpack("!HH9ss6s",tcpheader)
    print(tcp_hdr)
    print("------------------------------------------------------------------")
    print("-----------------Extracting Port numbers -------------------------")
    print("Source Port: "+str(tcp_hdr[1]))
    print("Destination Port: "+str(tcp_hdr[0]))
    print("------------------------------------------------------------------")
    

